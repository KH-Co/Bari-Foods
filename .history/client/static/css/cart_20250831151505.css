def min_distance_to_kill_dragons(R, C, K, D, dragons):
    dragons.sort(key=lambda x: x[0])
    mindist = [[float('inf')] * (K + 1) for _ in range(D + 1)]
    for i in range(1, D + 1):
        r, c = dragons[i - 1]
        mindist[i][1] = r + c
    for j in range(2, K + 1):
        for i in range(j, D + 1):  # Corrected range syntax
            r_i, c_i = dragons[i - 1]
            for k in range(j - 1, i):
                r_k, c_k = dragons[k - 1]
                dist = mindist[k][j - 1] + (r_i - r_k) + abs(c_i - c_k)
                if dist < mindist[i][j]:
                    mindist[i][j] = dist
    return min(mindist[i][K] for i in range(K, D + 1))

R, C, K, D = map(int, input().split())
dragons = [tuple(map(int, input().split())) for _ in range(D)]
print(min_distance_to_kill_dragons(R, C, K, D, dragons))